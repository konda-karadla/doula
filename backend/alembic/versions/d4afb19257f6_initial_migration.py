"""Initial migration

Revision ID: d4afb19257f6
Revises: 
Create Date: 2025-10-20 04:03:04.264672

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

revision: str = 'd4afb19257f6'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('_prisma_migrations')
    op.alter_column('action_items', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('action_items', 'action_plan_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('action_items', 'title',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('action_items', 'due_date',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('action_items', 'completed_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('action_items', 'priority',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text("'medium'::text"))
    op.alter_column('action_items', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('action_items', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_index('action_items_action_plan_id_idx', table_name='action_items')
    op.create_index(op.f('ix_action_items_action_plan_id'), 'action_items', ['action_plan_id'], unique=False)
    op.drop_constraint('action_items_action_plan_id_fkey', 'action_items', type_='foreignkey')
    op.create_foreign_key(None, 'action_items', 'action_plans', ['action_plan_id'], ['id'], ondelete='CASCADE')
    op.drop_column('action_items', 'status')
    op.alter_column('action_plans', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('action_plans', 'user_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('action_plans', 'system_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('action_plans', 'title',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('action_plans', 'status',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text("'active'::text"))
    op.alter_column('action_plans', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('action_plans', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_index('action_plans_system_id_idx', table_name='action_plans')
    op.drop_index('action_plans_user_id_idx', table_name='action_plans')
    op.create_index(op.f('ix_action_plans_system_id'), 'action_plans', ['system_id'], unique=False)
    op.create_index(op.f('ix_action_plans_user_id'), 'action_plans', ['user_id'], unique=False)
    op.drop_constraint('action_plans_user_id_fkey', 'action_plans', type_='foreignkey')
    op.drop_constraint('action_plans_system_id_fkey', 'action_plans', type_='foreignkey')
    op.create_foreign_key(None, 'action_plans', 'systems', ['system_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'action_plans', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('action_plans', 'target_date')
    op.drop_column('action_plans', 'priority')
    op.alter_column('availability_slots', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('availability_slots', 'doctor_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('availability_slots', 'start_time',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('availability_slots', 'end_time',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('availability_slots', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('availability_slots_day_of_week_idx', table_name='availability_slots')
    op.drop_index('availability_slots_doctor_id_idx', table_name='availability_slots')
    op.create_index(op.f('ix_availability_slots_day_of_week'), 'availability_slots', ['day_of_week'], unique=False)
    op.create_index(op.f('ix_availability_slots_doctor_id'), 'availability_slots', ['doctor_id'], unique=False)
    op.drop_constraint('availability_slots_doctor_id_fkey', 'availability_slots', type_='foreignkey')
    op.create_foreign_key(None, 'availability_slots', 'doctors', ['doctor_id'], ['id'], ondelete='CASCADE')
    op.alter_column('biomarkers', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('biomarkers', 'lab_result_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('biomarkers', 'test_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('biomarkers', 'value',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('biomarkers', 'unit',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('biomarkers', 'reference_range_low',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('biomarkers', 'reference_range_high',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('biomarkers', 'test_date',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('biomarkers', 'notes',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('biomarkers', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('biomarkers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_index('biomarkers_lab_result_id_idx', table_name='biomarkers')
    op.drop_index('biomarkers_test_name_idx', table_name='biomarkers')
    op.create_index(op.f('ix_biomarkers_lab_result_id'), 'biomarkers', ['lab_result_id'], unique=False)
    op.create_index(op.f('ix_biomarkers_test_name'), 'biomarkers', ['test_name'], unique=False)
    op.drop_constraint('biomarkers_lab_result_id_fkey', 'biomarkers', type_='foreignkey')
    op.create_foreign_key(None, 'biomarkers', 'lab_results', ['lab_result_id'], ['id'], ondelete='CASCADE')
    op.alter_column('consultations', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('consultations', 'user_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('consultations', 'doctor_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('consultations', 'scheduled_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('consultations', 'meeting_link',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('consultations', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('consultations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_index('consultations_doctor_id_idx', table_name='consultations')
    op.drop_index('consultations_scheduled_at_idx', table_name='consultations')
    op.drop_index('consultations_status_idx', table_name='consultations')
    op.drop_index('consultations_user_id_idx', table_name='consultations')
    op.create_index(op.f('ix_consultations_doctor_id'), 'consultations', ['doctor_id'], unique=False)
    op.create_index(op.f('ix_consultations_scheduled_at'), 'consultations', ['scheduled_at'], unique=False)
    op.create_index(op.f('ix_consultations_status'), 'consultations', ['status'], unique=False)
    op.create_index(op.f('ix_consultations_user_id'), 'consultations', ['user_id'], unique=False)
    op.drop_constraint('consultations_user_id_fkey', 'consultations', type_='foreignkey')
    op.drop_constraint('consultations_doctor_id_fkey', 'consultations', type_='foreignkey')
    op.create_foreign_key(None, 'consultations', 'doctors', ['doctor_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'consultations', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('doctors', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('doctors', 'system_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('doctors', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('doctors', 'specialization',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('doctors', 'image_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('doctors', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('doctors', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_index('doctors_is_active_idx', table_name='doctors')
    op.drop_index('doctors_specialization_idx', table_name='doctors')
    op.drop_index('doctors_system_id_idx', table_name='doctors')
    op.create_index(op.f('ix_doctors_is_active'), 'doctors', ['is_active'], unique=False)
    op.create_index(op.f('ix_doctors_specialization'), 'doctors', ['specialization'], unique=False)
    op.create_index(op.f('ix_doctors_system_id'), 'doctors', ['system_id'], unique=False)
    op.drop_constraint('doctors_system_id_fkey', 'doctors', type_='foreignkey')
    op.create_foreign_key(None, 'doctors', 'systems', ['system_id'], ['id'], ondelete='CASCADE')
    op.alter_column('feature_flags', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('feature_flags', 'system_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('feature_flags', 'flag_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('feature_flags', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('feature_flags', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_index('feature_flags_system_id_flag_name_key', table_name='feature_flags')
    op.drop_index('feature_flags_system_id_idx', table_name='feature_flags')
    op.create_index(op.f('ix_feature_flags_system_id'), 'feature_flags', ['system_id'], unique=False)
    op.create_unique_constraint('uix_feature_flag', 'feature_flags', ['system_id', 'flag_name'])
    op.drop_constraint('feature_flags_system_id_fkey', 'feature_flags', type_='foreignkey')
    op.create_foreign_key(None, 'feature_flags', 'systems', ['system_id'], ['id'], ondelete='CASCADE')
    op.alter_column('lab_results', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('lab_results', 'user_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('lab_results', 'system_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('lab_results', 'file_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('lab_results', 's3_key',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('lab_results', 's3_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('lab_results', 'uploaded_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('lab_results', 'processing_status',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text("'pending'::text"))
    op.alter_column('lab_results', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('lab_results', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_index('lab_results_system_id_idx', table_name='lab_results')
    op.drop_index('lab_results_user_id_idx', table_name='lab_results')
    op.create_index(op.f('ix_lab_results_system_id'), 'lab_results', ['system_id'], unique=False)
    op.create_index(op.f('ix_lab_results_user_id'), 'lab_results', ['user_id'], unique=False)
    op.drop_constraint('lab_results_system_id_fkey', 'lab_results', type_='foreignkey')
    op.drop_constraint('lab_results_user_id_fkey', 'lab_results', type_='foreignkey')
    op.create_foreign_key(None, 'lab_results', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'lab_results', 'systems', ['system_id'], ['id'], ondelete='CASCADE')
    op.alter_column('refresh_tokens', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('refresh_tokens', 'user_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('refresh_tokens', 'token',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('refresh_tokens', 'expires_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('refresh_tokens', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('refresh_tokens_token_key', table_name='refresh_tokens')
    op.drop_index('refresh_tokens_user_id_idx', table_name='refresh_tokens')
    op.create_index(op.f('ix_refresh_tokens_user_id'), 'refresh_tokens', ['user_id'], unique=False)
    op.create_unique_constraint(None, 'refresh_tokens', ['token'])
    op.drop_constraint('refresh_tokens_user_id_fkey', 'refresh_tokens', type_='foreignkey')
    op.create_foreign_key(None, 'refresh_tokens', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('system_configs', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('system_configs', 'system_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('system_configs', 'config_key',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('system_configs', 'config_value',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('system_configs', 'data_type',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('system_configs', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('system_configs', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_index('system_configs_system_id_config_key_key', table_name='system_configs')
    op.drop_index('system_configs_system_id_idx', table_name='system_configs')
    op.create_index(op.f('ix_system_configs_system_id'), 'system_configs', ['system_id'], unique=False)
    op.create_unique_constraint('uix_system_config', 'system_configs', ['system_id', 'config_key'])
    op.drop_constraint('system_configs_system_id_fkey', 'system_configs', type_='foreignkey')
    op.create_foreign_key(None, 'system_configs', 'systems', ['system_id'], ['id'], ondelete='CASCADE')
    op.alter_column('systems', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('systems', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('systems', 'slug',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('systems', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('systems', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_index('systems_name_key', table_name='systems')
    op.drop_index('systems_slug_key', table_name='systems')
    op.create_unique_constraint(None, 'systems', ['name'])
    op.create_unique_constraint(None, 'systems', ['slug'])
    op.alter_column('users', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'username',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'password',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'role',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text("'user'::text"))
    op.alter_column('users', 'language',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text("'en'::text"))
    op.alter_column('users', 'profile_type',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'journey_type',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'system_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_index('users_email_key', table_name='users')
    op.drop_index('users_role_idx', table_name='users')
    op.drop_index('users_system_id_idx', table_name='users')
    op.drop_index('users_username_key', table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_system_id'), 'users', ['system_id'], unique=False)
    op.create_unique_constraint(None, 'users', ['username'])
    op.drop_constraint('users_system_id_fkey', 'users', type_='foreignkey')
    op.create_foreign_key(None, 'users', 'systems', ['system_id'], ['id'], ondelete='CASCADE')
    op.drop_column('users', 'health_goals')
    op.drop_column('users', 'date_of_birth')
    op.drop_column('users', 'emergency_contact_phone')
    op.drop_column('users', 'first_name')
    op.drop_column('users', 'phone_number')
    op.drop_column('users', 'last_name')
    op.drop_column('users', 'emergency_contact_name')
    op.drop_column('users', 'preferences')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('preferences', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('emergency_contact_name', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('last_name', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('phone_number', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('first_name', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('emergency_contact_phone', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('date_of_birth', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('health_goals', postgresql.ARRAY(sa.TEXT()), server_default=sa.text('ARRAY[]::text[]'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.create_foreign_key('users_system_id_fkey', 'users', 'systems', ['system_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_index(op.f('ix_users_system_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index('users_username_key', 'users', ['username'], unique=True)
    op.create_index('users_system_id_idx', 'users', ['system_id'], unique=False)
    op.create_index('users_role_idx', 'users', ['role'], unique=False)
    op.create_index('users_email_key', 'users', ['email'], unique=True)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'system_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'journey_type',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'profile_type',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'language',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False,
               existing_server_default=sa.text("'en'::text"))
    op.alter_column('users', 'role',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False,
               existing_server_default=sa.text("'user'::text"))
    op.alter_column('users', 'password',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'username',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'systems', type_='unique')
    op.drop_constraint(None, 'systems', type_='unique')
    op.create_index('systems_slug_key', 'systems', ['slug'], unique=True)
    op.create_index('systems_name_key', 'systems', ['name'], unique=True)
    op.alter_column('systems', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False)
    op.alter_column('systems', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('systems', 'slug',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('systems', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('systems', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'system_configs', type_='foreignkey')
    op.create_foreign_key('system_configs_system_id_fkey', 'system_configs', 'systems', ['system_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint('uix_system_config', 'system_configs', type_='unique')
    op.drop_index(op.f('ix_system_configs_system_id'), table_name='system_configs')
    op.create_index('system_configs_system_id_idx', 'system_configs', ['system_id'], unique=False)
    op.create_index('system_configs_system_id_config_key_key', 'system_configs', ['system_id', 'config_key'], unique=True)
    op.alter_column('system_configs', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False)
    op.alter_column('system_configs', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('system_configs', 'data_type',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('system_configs', 'config_value',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('system_configs', 'config_key',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('system_configs', 'system_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('system_configs', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'refresh_tokens', type_='foreignkey')
    op.create_foreign_key('refresh_tokens_user_id_fkey', 'refresh_tokens', 'users', ['user_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint(None, 'refresh_tokens', type_='unique')
    op.drop_index(op.f('ix_refresh_tokens_user_id'), table_name='refresh_tokens')
    op.create_index('refresh_tokens_user_id_idx', 'refresh_tokens', ['user_id'], unique=False)
    op.create_index('refresh_tokens_token_key', 'refresh_tokens', ['token'], unique=True)
    op.alter_column('refresh_tokens', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('refresh_tokens', 'expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False)
    op.alter_column('refresh_tokens', 'token',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('refresh_tokens', 'user_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('refresh_tokens', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'lab_results', type_='foreignkey')
    op.drop_constraint(None, 'lab_results', type_='foreignkey')
    op.create_foreign_key('lab_results_user_id_fkey', 'lab_results', 'users', ['user_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('lab_results_system_id_fkey', 'lab_results', 'systems', ['system_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_index(op.f('ix_lab_results_user_id'), table_name='lab_results')
    op.drop_index(op.f('ix_lab_results_system_id'), table_name='lab_results')
    op.create_index('lab_results_user_id_idx', 'lab_results', ['user_id'], unique=False)
    op.create_index('lab_results_system_id_idx', 'lab_results', ['system_id'], unique=False)
    op.alter_column('lab_results', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False)
    op.alter_column('lab_results', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('lab_results', 'processing_status',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False,
               existing_server_default=sa.text("'pending'::text"))
    op.alter_column('lab_results', 'uploaded_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('lab_results', 's3_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('lab_results', 's3_key',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('lab_results', 'file_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('lab_results', 'system_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('lab_results', 'user_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('lab_results', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'feature_flags', type_='foreignkey')
    op.create_foreign_key('feature_flags_system_id_fkey', 'feature_flags', 'systems', ['system_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint('uix_feature_flag', 'feature_flags', type_='unique')
    op.drop_index(op.f('ix_feature_flags_system_id'), table_name='feature_flags')
    op.create_index('feature_flags_system_id_idx', 'feature_flags', ['system_id'], unique=False)
    op.create_index('feature_flags_system_id_flag_name_key', 'feature_flags', ['system_id', 'flag_name'], unique=True)
    op.alter_column('feature_flags', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False)
    op.alter_column('feature_flags', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('feature_flags', 'flag_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('feature_flags', 'system_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('feature_flags', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'doctors', type_='foreignkey')
    op.create_foreign_key('doctors_system_id_fkey', 'doctors', 'systems', ['system_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_index(op.f('ix_doctors_system_id'), table_name='doctors')
    op.drop_index(op.f('ix_doctors_specialization'), table_name='doctors')
    op.drop_index(op.f('ix_doctors_is_active'), table_name='doctors')
    op.create_index('doctors_system_id_idx', 'doctors', ['system_id'], unique=False)
    op.create_index('doctors_specialization_idx', 'doctors', ['specialization'], unique=False)
    op.create_index('doctors_is_active_idx', 'doctors', ['is_active'], unique=False)
    op.alter_column('doctors', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False)
    op.alter_column('doctors', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('doctors', 'image_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('doctors', 'specialization',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('doctors', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('doctors', 'system_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('doctors', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'consultations', type_='foreignkey')
    op.drop_constraint(None, 'consultations', type_='foreignkey')
    op.create_foreign_key('consultations_doctor_id_fkey', 'consultations', 'doctors', ['doctor_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('consultations_user_id_fkey', 'consultations', 'users', ['user_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_index(op.f('ix_consultations_user_id'), table_name='consultations')
    op.drop_index(op.f('ix_consultations_status'), table_name='consultations')
    op.drop_index(op.f('ix_consultations_scheduled_at'), table_name='consultations')
    op.drop_index(op.f('ix_consultations_doctor_id'), table_name='consultations')
    op.create_index('consultations_user_id_idx', 'consultations', ['user_id'], unique=False)
    op.create_index('consultations_status_idx', 'consultations', ['status'], unique=False)
    op.create_index('consultations_scheduled_at_idx', 'consultations', ['scheduled_at'], unique=False)
    op.create_index('consultations_doctor_id_idx', 'consultations', ['doctor_id'], unique=False)
    op.alter_column('consultations', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False)
    op.alter_column('consultations', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('consultations', 'meeting_link',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('consultations', 'scheduled_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False)
    op.alter_column('consultations', 'doctor_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('consultations', 'user_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('consultations', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'biomarkers', type_='foreignkey')
    op.create_foreign_key('biomarkers_lab_result_id_fkey', 'biomarkers', 'lab_results', ['lab_result_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_index(op.f('ix_biomarkers_test_name'), table_name='biomarkers')
    op.drop_index(op.f('ix_biomarkers_lab_result_id'), table_name='biomarkers')
    op.create_index('biomarkers_test_name_idx', 'biomarkers', ['test_name'], unique=False)
    op.create_index('biomarkers_lab_result_id_idx', 'biomarkers', ['lab_result_id'], unique=False)
    op.alter_column('biomarkers', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False)
    op.alter_column('biomarkers', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('biomarkers', 'notes',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('biomarkers', 'test_date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=True)
    op.alter_column('biomarkers', 'reference_range_high',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('biomarkers', 'reference_range_low',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('biomarkers', 'unit',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('biomarkers', 'value',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('biomarkers', 'test_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('biomarkers', 'lab_result_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('biomarkers', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'availability_slots', type_='foreignkey')
    op.create_foreign_key('availability_slots_doctor_id_fkey', 'availability_slots', 'doctors', ['doctor_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_index(op.f('ix_availability_slots_doctor_id'), table_name='availability_slots')
    op.drop_index(op.f('ix_availability_slots_day_of_week'), table_name='availability_slots')
    op.create_index('availability_slots_doctor_id_idx', 'availability_slots', ['doctor_id'], unique=False)
    op.create_index('availability_slots_day_of_week_idx', 'availability_slots', ['day_of_week'], unique=False)
    op.alter_column('availability_slots', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('availability_slots', 'end_time',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('availability_slots', 'start_time',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('availability_slots', 'doctor_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('availability_slots', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.add_column('action_plans', sa.Column('priority', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('action_plans', sa.Column('target_date', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'action_plans', type_='foreignkey')
    op.drop_constraint(None, 'action_plans', type_='foreignkey')
    op.create_foreign_key('action_plans_system_id_fkey', 'action_plans', 'systems', ['system_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('action_plans_user_id_fkey', 'action_plans', 'users', ['user_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_index(op.f('ix_action_plans_user_id'), table_name='action_plans')
    op.drop_index(op.f('ix_action_plans_system_id'), table_name='action_plans')
    op.create_index('action_plans_user_id_idx', 'action_plans', ['user_id'], unique=False)
    op.create_index('action_plans_system_id_idx', 'action_plans', ['system_id'], unique=False)
    op.alter_column('action_plans', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False)
    op.alter_column('action_plans', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('action_plans', 'status',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False,
               existing_server_default=sa.text("'active'::text"))
    op.alter_column('action_plans', 'title',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('action_plans', 'system_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('action_plans', 'user_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('action_plans', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.add_column('action_items', sa.Column('status', sa.TEXT(), server_default=sa.text("'pending'::text"), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'action_items', type_='foreignkey')
    op.create_foreign_key('action_items_action_plan_id_fkey', 'action_items', 'action_plans', ['action_plan_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_index(op.f('ix_action_items_action_plan_id'), table_name='action_items')
    op.create_index('action_items_action_plan_id_idx', 'action_items', ['action_plan_id'], unique=False)
    op.alter_column('action_items', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False)
    op.alter_column('action_items', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('action_items', 'priority',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False,
               existing_server_default=sa.text("'medium'::text"))
    op.alter_column('action_items', 'completed_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=True)
    op.alter_column('action_items', 'due_date',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=True)
    op.alter_column('action_items', 'title',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('action_items', 'action_plan_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('action_items', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.create_table('_prisma_migrations',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('finished_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('migration_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('logs', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rolled_back_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('applied_steps_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='_prisma_migrations_pkey')
    )
    # ### end Alembic commands ###
